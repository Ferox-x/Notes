name: CI/CD workflow

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'main'
      - 'dev'

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up Python 3.11.0
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.0

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort==5.0.0 pytest
          pip install -r backend/requirements.txt

      - name: test using flake8
        run: |
          python -m flake8 backend

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if:
      contains('refs/heads/master refs/heads/main', github.ref)
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/styles-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest
          context: ./backend
          file: ./backend/Dockerfile

  deploy:
    name: Deploy at remote server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if:
      contains('refs/heads/master refs/heads/main', github.ref)
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker compose stop
            sudo docker compose rm web

            rm -Rf .env
            touch .env

            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo DJANGO_LOG_LEVEL=${{ secrets.DJANGO_LOG_LEVEL }} >> .env

            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env

            echo POOL_MODE=${{ secrets.POOL_MODE }} >> .env
            echo ADMIN_USERS=${{ secrets.ADMIN_USERS }} >> .env
            echo MAX_CLIENT_CONN=${{ secrets.MAX_CLIENT_CONN }} >> .env
            echo AUTH_TYPE=${{ secrets.AUTH_TYPE }} >> .env

            sudo docker compose up -d

  telegram_notification:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            
            Repository: ${{ github.repository }}
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
